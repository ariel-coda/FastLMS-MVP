import { NextRequest, NextResponse } from 'next/server';
import { adminDb } from '@/app/lib/firebase/firebaseAdmin'; // Admin SDK corrig√©
import bcrypt from 'bcryptjs';

interface RegisterData {
  nom: string;
  fonction: string;
  nomEcole: string;
  email: string;
  telephone: string;
  motDePasse: string;
}

// Expressions r√©guli√®res pour validation c√¥t√© serveur
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
const phoneRegex = /^(\+237)6(\d{8})$/;
const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&#.\-_+])[A-Za-z\d@$!%*?&#.\-_+]{8,}$/;
const nameRegex = /^[a-zA-Z√Ä-√ø\s-']{2,50}$/;

// Fonction de validation compl√®te
const validateFormData = (data: RegisterData): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];

  // Validation nom
  if (!data.nom.trim()) {
    errors.push("Le nom est requis");
  } else if (!nameRegex.test(data.nom)) {
    errors.push("Le nom doit contenir uniquement des lettres (2-50 caract√®res)");
  }

  // Validation fonction
  if (!data.fonction.trim()) {
    errors.push("La fonction est requise");
  } else if (data.fonction.length < 2 || data.fonction.length > 100) {
    errors.push("La fonction doit contenir entre 2 et 100 caract√®res");
  }

  // Validation nom √©cole
  if (!data.nomEcole.trim()) {
    errors.push("Le nom de l'√©cole est requis");
  } else if (data.nomEcole.length < 2 || data.nomEcole.length > 100) {
    errors.push("Le nom de l'√©cole doit contenir entre 2 et 100 caract√®res");
  }

  // Validation email
  if (!data.email.trim()) {
    errors.push("L'email est requis");
  } else if (!emailRegex.test(data.email)) {
    errors.push("Format d'email invalide");
  }

  // Validation t√©l√©phone
  if (!data.telephone.trim()) {
    errors.push("Le num√©ro de t√©l√©phone est requis");
  } else if (!phoneRegex.test(data.telephone)) {
    errors.push("Format de t√©l√©phone invalide");
  }

  // Validation mot de passe
  if (!data.motDePasse) {
    errors.push("Le mot de passe est requis");
  } else if (!passwordRegex.test(data.motDePasse)) {
    errors.push("Le mot de passe doit contenir au moins 8 caract√®res, une majuscule, une minuscule et un chiffre");
  }

  return {
    isValid: errors.length === 0,
    errors
  };
};

// ‚úÖ Fonction corrig√©e avec Admin SDK
const checkEmailExists = async (email: string): Promise<boolean> => {
  try {
    console.log('V√©rification email:', email);
    
    // Utiliser Admin SDK pour la requ√™te
    const usersRef = adminDb.collection('usersTrial');
    const querySnapshot = await usersRef.where('email', '==', email.toLowerCase()).get();
    
    const exists = !querySnapshot.empty;
    console.log('Email existe d√©j√†:', exists);
    
    return exists;
  } catch (error) {
    console.error('Erreur lors de la v√©rification de l\'email:', error);
    throw new Error('Erreur lors de la v√©rification de l\'email');
  }
};

export async function POST(request: NextRequest) {
  try {
    console.log('üéØ Tentative d\'inscription...');
    
    // Parse des donn√©es du formulaire
    const body: RegisterData = await request.json();
    console.log('Donn√©es re√ßues:', { email: body.email, nom: body.nom });

    // Validation des donn√©es
    const validation = validateFormData(body);
    if (!validation.isValid) {
      console.log('‚ùå Validation √©chou√©e:', validation.errors);
      return NextResponse.json(
        { 
          success: false, 
          message: 'Donn√©es invalides', 
          errors: validation.errors 
        },
        { status: 400 }
      );
    }

    // Normaliser l'email
    const normalizedEmail = body.email.toLowerCase().trim();
    console.log('Email normalis√©:', normalizedEmail);

    // V√©rifier si l'email existe d√©j√†
    const emailExists = await checkEmailExists(normalizedEmail);
    if (emailExists) {
      console.log('‚ùå Email existe d√©j√†');
      return NextResponse.json(
        { 
          success: false, 
          message: 'Un compte avec cet email existe d√©j√†' 
        },
        { status: 409 }
      );
    }

    console.log('‚úÖ Email disponible');

    // Chiffrer le mot de passe
    console.log('üîê Chiffrement du mot de passe...');
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(body.motDePasse, saltRounds);

    // Pr√©parer les donn√©es pour Firestore
    const userData = {
      nom: body.nom.trim(),
      fonction: body.fonction.trim(),
      nomEcole: body.nomEcole.trim(),
      email: normalizedEmail,
      telephone: body.telephone.trim(),
      motDePasse: hashedPassword,
      status: 'trial', // Statut trial pour l'inscription
      dateCreation: new Date(),
      dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 jours
      active: true
    };

    console.log('üíæ Sauvegarde en cours...');
    
    // ‚úÖ Ajouter l'utilisateur √† Firestore avec Admin SDK
    const usersRef = adminDb.collection('usersTrial');
    const docRef = await usersRef.add(userData);

    console.log('üéâ Nouvel utilisateur cr√©√© avec l\'ID:', docRef.id);

    // R√©ponse de succ√®s
    return NextResponse.json({
      success: true,
      message: 'Inscription r√©ussie ! Votre p√©riode d\'essai de 30 jours a commenc√©.',
      userId: docRef.id,
      trialExpiresAt: userData.dateExpiration
    }, { status: 201 });

  } catch (error) {
    console.error('üí• Erreur lors de l\'inscription:', {
      error: error,
      message: (error as any)?.message,
      stack: (error as any)?.stack
    });
    
    return NextResponse.json(
      { 
        success: false, 
        message: 'Erreur interne du serveur. Veuillez r√©essayer plus tard.' 
      },
      { status: 500 }
    );
  }
}

// Gestion des autres m√©thodes HTTP
export async function GET() {
  return NextResponse.json(
    { message: 'M√©thode non autoris√©e' },
    { status: 405 }
  );
}