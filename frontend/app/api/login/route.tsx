import { NextRequest, NextResponse } from 'next/server';
import { adminDb } from '@/app/lib/firebase/firebaseAdmin'; // Admin SDK
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

interface LoginData {
  email: string;
  motDePasse: string;
}

interface UserData {
  nom: string;
  fonction: string;
  nomEcole: string;
  email: string;
  telephone: string;
  motDePasse: string;
  status: string;
  dateCreation: any;
  dateExpiration: any;
  active: boolean;
}

// Expressions r√©guli√®res pour validation c√¥t√© serveur
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

// Fonction de validation des donn√©es de connexion
const validateLoginData = (data: LoginData): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];

  // Validation email
  if (!data.email.trim()) {
    errors.push("L'adresse email est requise");
  } else if (!emailRegex.test(data.email)) {
    errors.push("Format d'email invalide");
  }

  // Validation mot de passe
  if (!data.motDePasse) {
    errors.push("Le mot de passe est requis");
  }

  return {
    isValid: errors.length === 0,
    errors
  };
};

// Fonction pour g√©n√©rer un token JWT
const generateToken = (userId: string, email: string): string => {
  const payload = {
    userId,
    email,
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 heures
  };

  return jwt.sign(payload, process.env.JWT_SECRET || 'votre-secret-jwt-super-securise');
};

// ‚úÖ Fonction corrig√©e avec Admin SDK
const getUserByEmail = async (email: string): Promise<{ exists: boolean; userData?: UserData; userId?: string }> => {
  try {
    console.log('Recherche utilisateur avec email:', email);
    
    // Utiliser Admin SDK pour la requ√™te
    const usersRef = adminDb.collection('usersTrial');
    const querySnapshot = await usersRef.where('email', '==', email.toLowerCase()).get();
    
    if (querySnapshot.empty) {
      console.log('Aucun utilisateur trouv√© avec cet email');
      return { exists: false };
    }

    const userDoc = querySnapshot.docs[0];
    const userData = userDoc.data() as UserData;
    const userId = userDoc.id;

    console.log('Utilisateur trouv√©:', { userId, email: userData.email });

    return { 
      exists: true, 
      userData,
      userId 
    };
  } catch (error) {
    console.error('Erreur d√©taill√©e lors de la r√©cup√©ration de l\'utilisateur:', {
      error: error,
      message: (error as any)?.message,
      code: (error as any)?.code
    });
    throw new Error('Erreur lors de la v√©rification des identifiants');
  }
};

export async function POST(request: NextRequest) {
  try {
    console.log('üîê Tentative de connexion...');
    
    // Parse des donn√©es du formulaire
    const body: LoginData = await request.json();
    console.log('Donn√©es re√ßues:', { email: body.email });

    // Validation des donn√©es
    const validation = validateLoginData(body);
    if (!validation.isValid) {
      console.log('‚ùå Validation √©chou√©e:', validation.errors);
      return NextResponse.json(
        { 
          success: false, 
          message: 'Donn√©es invalides', 
          errors: validation.errors 
        },
        { status: 400 }
      );
    }

    // Normaliser l'email
    const normalizedEmail = body.email.toLowerCase().trim();
    console.log('Email normalis√©:', normalizedEmail);

    // V√©rifier si l'utilisateur existe
    const userResult = await getUserByEmail(normalizedEmail);
    if (!userResult.exists || !userResult.userData || !userResult.userId) {
      console.log('‚ùå Utilisateur non trouv√© ou donn√©es manquantes');
      return NextResponse.json(
        { 
          success: false, 
          message: 'Email ou mot de passe incorrect' 
        },
        { status: 401 }
      );
    }

    const { userData, userId } = userResult;
    console.log('‚úÖ Utilisateur trouv√©:', { userId, active: userData.active, status: userData.status });

    // V√©rifier si le compte est actif
    if (!userData.active) {
      console.log('‚ùå Compte d√©sactiv√©');
      return NextResponse.json(
        { 
          success: false, 
          message: 'Votre compte a √©t√© d√©sactiv√©. Contactez l\'administrateur.' 
        },
        { status: 403 }
      );
    }

    // V√©rifier si la p√©riode d'essai n'est pas expir√©e (pour les comptes trial)
    if (userData.status === 'trial' && userData.dateExpiration) {
      const now = new Date();
      const expirationDate = userData.dateExpiration.toDate ? userData.dateExpiration.toDate() : new Date(userData.dateExpiration);
      
      if (now > expirationDate) {
        console.log('‚ùå P√©riode d\'essai expir√©e');
        return NextResponse.json(
          { 
            success: false, 
            message: 'Votre p√©riode d\'essai a expir√©. Contactez l\'administrateur pour renouveler votre acc√®s.' 
          },
          { status: 403 }
        );
      }
    }

    // V√©rifier le mot de passe
    console.log('üîç V√©rification du mot de passe...');
    const isPasswordValid = await bcrypt.compare(body.motDePasse, userData.motDePasse);
    
    if (!isPasswordValid) {
      console.log('‚ùå Mot de passe incorrect');
      return NextResponse.json(
        { 
          success: false, 
          message: 'Email ou mot de passe incorrect' 
        },
        { status: 401 }
      );
    }

    console.log('‚úÖ Mot de passe correct');

    // Mettre √† jour la derni√®re connexion avec Admin SDK
    try {
      const userDocRef = adminDb.collection('usersTrial').doc(userId);
      await userDocRef.update({
        lastLogin: new Date(),
        lastLoginIP: request.headers.get('x-forwarded-for') || 
                     request.headers.get('x-real-ip') || 
                     'unknown'
      });
      console.log('‚úÖ Derni√®re connexion mise √† jour');
    } catch (updateError) {
      console.warn('‚ö†Ô∏è Erreur lors de la mise √† jour de la derni√®re connexion:', updateError);
      // Ne pas faire √©chouer la connexion pour cette erreur
    }

    // G√©n√©rer le token JWT
    const token = generateToken(userId, userData.email);

    // Pr√©parer les donn√©es utilisateur √† renvoyer (sans le mot de passe)
    const userResponse = {
      id: userId,
      nom: userData.nom,
      fonction: userData.fonction,
      nomEcole: userData.nomEcole,
      email: userData.email,
      telephone: userData.telephone,
      status: userData.status
    };

    console.log('üéâ Connexion r√©ussie pour:', normalizedEmail);

    // R√©ponse de succ√®s
    return NextResponse.json({
      success: true,
      message: 'Connexion r√©ussie',
      user: userResponse,
      token: token
    }, { status: 200 });

  } catch (error) {
    console.error('üí• Erreur lors de la connexion:', {
      error: error,
      message: (error as any)?.message,
      stack: (error as any)?.stack
    });
    
    return NextResponse.json(
      { 
        success: false, 
        message: 'Erreur interne du serveur. Veuillez r√©essayer plus tard.' 
      },
      { status: 500 }
    );
  }
}

// Gestion des autres m√©thodes HTTP
export async function GET() {
  return NextResponse.json(
    { message: 'M√©thode non autoris√©e' },
    { status: 405 }
  );
}